USE SALES;

-- TRIGGERS
-- TRIGGERS SÃO BLOCOS DE COMANDOS QUE SÃO AUTOMATICAMENTE EXECUTADOS QUANDO UM COMANDO INSERT, DELETE OU UPDATE SÃO EXECUTADOS EM UMA TABELA DO BANCO DE DADOS.
-- SÃO UTILIZADOS PARA REALIZAR TAREFAS RELACIONADAS COM VALIDAÇÕES, RESTRIÇÕES DE ACESSO, ROTINAS DE SEGURANÇA E CONSISTÊNCIA DE DADOS.
-- DESTA FORMA ESTES CONTROLES DEIXAM DE SER EXECUTADOS PELA APLICAÇÃO E PASSAM A SER EXECUTADOS POR TRIGGERS EM DETERMINADAS SITUAÇÕES.

-- PARÂMETROS
-- NOME DO TRIGGER
-- NOME QUE IDENTIFICARÁ O GATILHO COMO OBJETO DO BANCO DE DADOS.

-- NOME DA TABELA
-- NOME DA TABELA À QUAL O GATILHO ESTARÁ LIGADO, PARA SER DISPARADO MEDIANTE AÇÕES DE INSERT, UPDATE OU DELETE.

-- FOR/AFTER/INSTEAD OF
-- UMA DESSAS OPÇÕES DEVE SER ESCOLHIDA PARA DEFINIR O MOMENTO EM QUE O TRIGGER SERÁ DISPARADO.
-- FOR É O VALOR PADRÃO E FAZ COM QUE O GATILHO SEJA DISPARADO JUNTO DA AÇÃO.
-- AFTER FAZ COM QUE O DISPARO SEJA REALIZADO APÓS A AÇÃO QUE O GEROU SER CONCLUÍDA.
-- INSTEAD OF FAZ COM QUE O TRIGGER SEJA EXECUTADO NO LUGAR DA AÇÃO QUE O GEROU.

-- INSERT/UPDATE/DELETE
-- UMA OU VÁRIAS DESSAS OPÇÕES (SEPARADAS POR VÍRGULA) DEVEM SER INDICADAS PARA INFORMAR AO BANCO DE DADOS QUAL É A AÇÃO QUE DISPARARÁ O GATILHO.

-- EXEMPLO 1
-- CRIANDO TABELA DE EXEMPLO FUNCIONARIO
CREATE TABLE FUNCIONARIO
		(
		MATRICULA INT IDENTITY(1,1) PRIMARY KEY,
		NOME VARCHAR(50) NOT NULL,
		DATA_NASC DATE
		);
-- INSERINDO REGISTROS NA TABELA FUNCIONARIO
INSERT INTO FUNCIONARIO VALUES ('ALLAN', '1991-12-30');
INSERT INTO FUNCIONARIO VALUES ('ELLEN', '1991-11-30');
INSERT INTO FUNCIONARIO VALUES ('EMILY', '1991-10-30');
INSERT INTO FUNCIONARIO VALUES ('SARAH', '1991-09-30');
INSERT INTO FUNCIONARIO VALUES ('STEVE', '1991-08-30');
-- VERIFICANDO REGISTROS INSERIDOS NA TABELA FUNCIONARIO
SELECT * FROM FUNCIONARIO;

-- CRIANDO TABELA DE EXEMPLO SALARIO
CREATE TABLE SALARIO
		(
		MATRICULA INT NOT NULL,
		SALARIO DECIMAL(10,2) NOT NULL
		);
-- INSERINDO REGISTROS NA TABELA SALARIO
INSERT INTO SALARIO VALUES (1, 1000);
INSERT INTO SALARIO VALUES (2, 2000);
INSERT INTO SALARIO VALUES (3, 3000);
INSERT INTO SALARIO VALUES (4, 4000);
INSERT INTO SALARIO VALUES (5, 5000);
-- VERIFICANDO REGISTROS INSERIDOS NA TABELA SALARIO
SELECT * FROM SALARIO;

-- CRIANDO TABELA DE EXEMPLO AUDITORIA_SALARIO
CREATE TABLE AUDITORIA_SALARIO
		(
		MATRICULA INT NOT NULL,
		SALARIO_ANTES DECIMAL(10,2) NOT NULL,
		SALARIO_DEPOIS DECIMAL(10,2) NOT NULL,
		USUARIO VARCHAR(50) NOT NULL,
		DATA_ATUALIZACAO DATETIME NOT NULL
		);

-- CRIANDO TRIGGER (UPDATE ÚNICO REGISTRO)
CREATE TRIGGER TG_AUDITORIA_SALARIO
	ON SALARIO
		AFTER UPDATE
	AS
	BEGIN
		DECLARE @SALARIO_ANTIGO DECIMAL(10,2)
		DECLARE @SALARIO_NOVO DECIMAL(10,2)
		DECLARE @MATRICULA INT

		SELECT @MATRICULA = (SELECT MATRICULA FROM INSERTED)
		SELECT @SALARIO_NOVO = (SELECT SALARIO FROM INSERTED)
		SELECT @SALARIO_ANTIGO = (SELECT SALARIO FROM DELETED)

		INSERT INTO AUDITORIA_SALARIO VALUES
		(@MATRICULA, ISNULL(@SALARIO_ANTIGO, 0), @SALARIO_NOVO, SYSTEM_USER, GETDATE())
	END;
-- TESTANDO TRIGGER TG_AUDITORIA_SALARIO
UPDATE SALARIO SET SALARIO = '2000' WHERE MATRICULA = 1;
UPDATE SALARIO SET SALARIO = '3000' WHERE MATRICULA = 2;
UPDATE SALARIO SET SALARIO = '4000' WHERE MATRICULA = 3;
UPDATE SALARIO SET SALARIO = '5000' WHERE MATRICULA = 4;
UPDATE SALARIO SET SALARIO = '6000' WHERE MATRICULA = 5;
-- VERIFICANDO REGISTROS ATUALIZADOS NA TABELA SALARIO
SELECT * FROM SALARIO;
-- VERIFICANDO REGISTROS ATUALIZADOS NA TABELA AUDITORIA_SALARIO
SELECT * FROM AUDITORIA_SALARIO;
-- FORÇANDO PROBLEMA UPDATE MÚLTIPLOS REGISTROS
UPDATE SALARIO SET SALARIO = SALARIO * 1.50;
-- EXCLUINDO TRIGGER TG_AUDITORIA_SALARIO
DROP TRIGGER TG_AUDITORIA_SALARIO;


-- CRIANDO TRIGGER (UPDATE MÚLTIPLOS REGISTROS)
CREATE TRIGGER TG_AUDITORIA_SALARIO_MULTI
	ON SALARIO
		AFTER UPDATE
	AS
	BEGIN
		DECLARE @MATRICULA_AUX INT
		DECLARE CURSOR_PROCESSO CURSOR FOR

			SELECT MATRICULA FROM INSERTED

			OPEN CURSOR_PROCESSO
			FETCH NEXT FROM CURSOR_PROCESSO INTO @MATRICULA_AUX
			WHILE @@FETCH_STATUS = 0
				BEGIN
					INSERT INTO AUDITORIA_SALARIO
					SELECT I.MATRICULA,
						   D.SALARIO,
						   I.SALARIO,
						   SYSTEM_USER,
						   GETDATE()
					FROM DELETED AS D,
						 INSERTED AS I
					WHERE D.MATRICULA = I.MATRICULA
					AND @MATRICULA_AUX = I.MATRICULA
					FETCH NEXT FROM CURSOR_PROCESSO INTO @MATRICULA_AUX
				END
			CLOSE CURSOR_PROCESSO
			DEALLOCATE CURSOR_PROCESSO
		END;
-- TESTANDO TRIGGER TG_AUDITORIA_SALARIO_MULTI
UPDATE SALARIO SET SALARIO=SALARIO * 1.50;
-- VERIFICANDO REGISTROS ATUALIZADOS NA TABELA SALARIO
SELECT * FROM SALARIO;
-- VERIFICANDO REGISTROS ATUALIZADOS NA TABELA AUDITORIA_SALARIO
SELECT * FROM AUDITORIA_SALARIO;
-- EXCLUINDO TRIGGER TG_AUDITORIA_SALARIO_MULTI
DROP TRIGGER TG_AUDITORIA_SALARIO_MULTI;


-- DESABILITANDO TRIGGER TG_AUDITORIA_SALARIO
DISABLE TRIGGER TG_AUDITORIA_SALARIO ON SALARIO;
-- HABILITANDO TRIGGER TG_AUDITORIA_SALARIO
ENABLE TRIGGER TG_AUDITORIA_SALARIO ON SALARIO;